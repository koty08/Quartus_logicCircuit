// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2021 21:50:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          practice2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module practice2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] Address;
reg clk;
reg [3:0] DataIn;
reg [3:0] Out_init;
reg rst_n;
reg RW;
// wires                                               
wire [3:0] DataOut;

// assign statements (if any)                          
practice2 i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.clk(clk),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.Out_init(Out_init),
	.rst_n(rst_n),
	.RW(RW)
);
initial 
begin 
#1000000 $finish;
end 
// Out_init[ 3 ]
initial
begin
	Out_init[3] = 1'b0;
end 
// Out_init[ 2 ]
initial
begin
	Out_init[2] = 1'b0;
end 
// Out_init[ 1 ]
initial
begin
	Out_init[1] = 1'b0;
end 
// Out_init[ 0 ]
initial
begin
	Out_init[0] = 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
end 
// Address[ 0 ]
initial
begin
	Address[0] = 1'b0;
	Address[0] = #120000 1'b1;
	Address[0] = #40000 1'b0;
	Address[0] = #120000 1'b1;
	Address[0] = #240000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// RW
initial
begin
	RW = 1'b0;
	RW = #120000 1'b1;
	RW = #40000 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	DataIn[2] = #120000 1'b1;
	DataIn[2] = #40000 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
	DataIn[1] = #120000 1'b1;
	DataIn[1] = #40000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 
endmodule

