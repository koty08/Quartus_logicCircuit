// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2021 20:05:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tpj
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tpj_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
reg [7:0] VAL_1_2;
reg [7:0] VAL_1_3;
reg [7:0] VAL_1_4;
reg [7:0] VAL_1_5;
reg [7:0] VAL_1_6;
reg [7:0] VAL_1_7;
reg [7:0] VAL_1_8;
reg [7:0] VAL_1_9;
reg VAL_1_10;
reg VAL_1_11;
reg VAL_1_12;
reg VAL_1_13;
reg VAL_1_14;
reg VAL_1_15;
reg VAL_1_16;
reg VAL_1_17;
reg VAL_1_100;
reg VAL_1_101;
reg VAL_1_102;
reg VAL_1_103;
reg VAL_1_104;
reg VAL_1_105;
reg VAL_1_106;
reg VAL_1_107;
reg VAL_1_110;
reg VAL_1_111;
reg VAL_1_112;
reg VAL_1_113;
reg VAL_1_114;
reg VAL_1_115;
reg VAL_1_116;
reg VAL_1_117;
reg VAL_1_120;
reg VAL_1_121;
reg VAL_1_122;
reg VAL_1_123;
reg VAL_1_124;
reg VAL_1_125;
reg VAL_1_126;
reg VAL_1_127;
reg VAL_1_130;
reg VAL_1_131;
reg VAL_1_132;
reg VAL_1_133;
reg VAL_1_134;
reg VAL_1_135;
reg VAL_1_136;
reg VAL_1_137;
reg VAL_1_140;
reg VAL_1_141;
reg VAL_1_142;
reg VAL_1_143;
reg VAL_1_144;
reg VAL_1_145;
reg VAL_1_146;
reg VAL_1_147;
reg VAL_1_150;
reg VAL_1_151;
reg VAL_1_152;
reg VAL_1_153;
reg VAL_1_154;
reg VAL_1_155;
reg VAL_1_156;
reg VAL_1_157;
reg VAL_1_160;
reg VAL_1_161;
reg VAL_1_162;
reg VAL_1_163;
reg VAL_1_164;
reg VAL_1_165;
reg VAL_1_166;
reg VAL_1_167;
// wires                                               
wire [7:0] LCD_DATA;
wire LCD_E;
wire LCD_RS;
wire LCD_RW;

// assign statements (if any)                          
tpj i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.LCD_DATA(LCD_DATA),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.RST(RST),
	.VAL_1_2(VAL_1_2),
	.VAL_1_3(VAL_1_3),
	.VAL_1_4(VAL_1_4),
	.VAL_1_5(VAL_1_5),
	.VAL_1_6(VAL_1_6),
	.VAL_1_7(VAL_1_7),
	.VAL_1_8(VAL_1_8),
	.VAL_1_9(VAL_1_9),
	.VAL_1_10(VAL_1_10),
	.VAL_1_11(VAL_1_11),
	.VAL_1_12(VAL_1_12),
	.VAL_1_13(VAL_1_13),
	.VAL_1_14(VAL_1_14),
	.VAL_1_15(VAL_1_15),
	.VAL_1_16(VAL_1_16),
	.VAL_1_17(VAL_1_17),
	.VAL_1_100(VAL_1_100),
	.VAL_1_101(VAL_1_101),
	.VAL_1_102(VAL_1_102),
	.VAL_1_103(VAL_1_103),
	.VAL_1_104(VAL_1_104),
	.VAL_1_105(VAL_1_105),
	.VAL_1_106(VAL_1_106),
	.VAL_1_107(VAL_1_107),
	.VAL_1_110(VAL_1_110),
	.VAL_1_111(VAL_1_111),
	.VAL_1_112(VAL_1_112),
	.VAL_1_113(VAL_1_113),
	.VAL_1_114(VAL_1_114),
	.VAL_1_115(VAL_1_115),
	.VAL_1_116(VAL_1_116),
	.VAL_1_117(VAL_1_117),
	.VAL_1_120(VAL_1_120),
	.VAL_1_121(VAL_1_121),
	.VAL_1_122(VAL_1_122),
	.VAL_1_123(VAL_1_123),
	.VAL_1_124(VAL_1_124),
	.VAL_1_125(VAL_1_125),
	.VAL_1_126(VAL_1_126),
	.VAL_1_127(VAL_1_127),
	.VAL_1_130(VAL_1_130),
	.VAL_1_131(VAL_1_131),
	.VAL_1_132(VAL_1_132),
	.VAL_1_133(VAL_1_133),
	.VAL_1_134(VAL_1_134),
	.VAL_1_135(VAL_1_135),
	.VAL_1_136(VAL_1_136),
	.VAL_1_137(VAL_1_137),
	.VAL_1_140(VAL_1_140),
	.VAL_1_141(VAL_1_141),
	.VAL_1_142(VAL_1_142),
	.VAL_1_143(VAL_1_143),
	.VAL_1_144(VAL_1_144),
	.VAL_1_145(VAL_1_145),
	.VAL_1_146(VAL_1_146),
	.VAL_1_147(VAL_1_147),
	.VAL_1_150(VAL_1_150),
	.VAL_1_151(VAL_1_151),
	.VAL_1_152(VAL_1_152),
	.VAL_1_153(VAL_1_153),
	.VAL_1_154(VAL_1_154),
	.VAL_1_155(VAL_1_155),
	.VAL_1_156(VAL_1_156),
	.VAL_1_157(VAL_1_157),
	.VAL_1_160(VAL_1_160),
	.VAL_1_161(VAL_1_161),
	.VAL_1_162(VAL_1_162),
	.VAL_1_163(VAL_1_163),
	.VAL_1_164(VAL_1_164),
	.VAL_1_165(VAL_1_165),
	.VAL_1_166(VAL_1_166),
	.VAL_1_167(VAL_1_167)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(16)
	begin
		CLK = 1'b0;
		CLK = #30000 1'b1;
		# 30000;
	end
	CLK = 1'b0;
	CLK = #30000 1'b1;
end 

// RST
initial
begin
	RST = 1'b0;
end 

// VAL_1_10
initial
begin
	VAL_1_10 = 1'b1;
	VAL_1_10 = #30000 1'b0;
end 

// VAL_1_11
initial
begin
	VAL_1_11 = 1'b1;
	VAL_1_11 = #30000 1'b0;
end 

// VAL_1_12
initial
begin
	VAL_1_12 = 1'b1;
	VAL_1_12 = #30000 1'b0;
end 

// VAL_1_13
initial
begin
	VAL_1_13 = 1'b1;
	VAL_1_13 = #30000 1'b0;
end 

// VAL_1_14
initial
begin
	VAL_1_14 = 1'b1;
	VAL_1_14 = #30000 1'b0;
end 

// VAL_1_15
initial
begin
	VAL_1_15 = 1'b0;
end 

// VAL_1_16
initial
begin
	VAL_1_16 = 1'b0;
end 

// VAL_1_17
initial
begin
	VAL_1_17 = 1'b0;
end 
// VAL_1_2[ 7 ]
initial
begin
	VAL_1_2[7] = 1'b0;
	VAL_1_2[7] = #30000 1'b1;
	VAL_1_2[7] = #60000 1'b0;
end 
// VAL_1_2[ 6 ]
initial
begin
	VAL_1_2[6] = 1'b0;
	VAL_1_2[6] = #30000 1'b1;
	VAL_1_2[6] = #60000 1'b0;
end 
// VAL_1_2[ 5 ]
initial
begin
	VAL_1_2[5] = 1'b0;
	VAL_1_2[5] = #30000 1'b1;
	VAL_1_2[5] = #60000 1'b0;
end 
// VAL_1_2[ 4 ]
initial
begin
	VAL_1_2[4] = 1'b0;
	VAL_1_2[4] = #30000 1'b1;
	VAL_1_2[4] = #60000 1'b0;
end 
// VAL_1_2[ 3 ]
initial
begin
	VAL_1_2[3] = 1'b0;
end 
// VAL_1_2[ 2 ]
initial
begin
	VAL_1_2[2] = 1'b0;
end 
// VAL_1_2[ 1 ]
initial
begin
	VAL_1_2[1] = 1'b0;
end 
// VAL_1_2[ 0 ]
initial
begin
	VAL_1_2[0] = 1'b0;
end 
// VAL_1_3[ 7 ]
initial
begin
	VAL_1_3[7] = 1'b0;
	VAL_1_3[7] = #90000 1'b1;
	VAL_1_3[7] = #60000 1'b0;
end 
// VAL_1_3[ 6 ]
initial
begin
	VAL_1_3[6] = 1'b0;
	VAL_1_3[6] = #90000 1'b1;
	VAL_1_3[6] = #60000 1'b0;
end 
// VAL_1_3[ 5 ]
initial
begin
	VAL_1_3[5] = 1'b0;
	VAL_1_3[5] = #90000 1'b1;
	VAL_1_3[5] = #60000 1'b0;
end 
// VAL_1_3[ 4 ]
initial
begin
	VAL_1_3[4] = 1'b0;
end 
// VAL_1_3[ 3 ]
initial
begin
	VAL_1_3[3] = 1'b0;
end 
// VAL_1_3[ 2 ]
initial
begin
	VAL_1_3[2] = 1'b0;
end 
// VAL_1_3[ 1 ]
initial
begin
	VAL_1_3[1] = 1'b0;
end 
// VAL_1_3[ 0 ]
initial
begin
	VAL_1_3[0] = 1'b0;
end 
// VAL_1_4[ 7 ]
initial
begin
	VAL_1_4[7] = 1'b0;
end 
// VAL_1_4[ 6 ]
initial
begin
	VAL_1_4[6] = 1'b0;
end 
// VAL_1_4[ 5 ]
initial
begin
	VAL_1_4[5] = 1'b0;
end 
// VAL_1_4[ 4 ]
initial
begin
	VAL_1_4[4] = 1'b0;
	VAL_1_4[4] = #160000 1'b1;
	VAL_1_4[4] = #60000 1'b0;
end 
// VAL_1_4[ 3 ]
initial
begin
	VAL_1_4[3] = 1'b0;
	VAL_1_4[3] = #160000 1'b1;
	VAL_1_4[3] = #60000 1'b0;
end 
// VAL_1_4[ 2 ]
initial
begin
	VAL_1_4[2] = 1'b0;
	VAL_1_4[2] = #160000 1'b1;
	VAL_1_4[2] = #60000 1'b0;
end 
// VAL_1_4[ 1 ]
initial
begin
	VAL_1_4[1] = 1'b0;
end 
// VAL_1_4[ 0 ]
initial
begin
	VAL_1_4[0] = 1'b0;
end 
// VAL_1_5[ 7 ]
initial
begin
	VAL_1_5[7] = 1'b0;
end 
// VAL_1_5[ 6 ]
initial
begin
	VAL_1_5[6] = 1'b0;
end 
// VAL_1_5[ 5 ]
initial
begin
	VAL_1_5[5] = 1'b0;
end 
// VAL_1_5[ 4 ]
initial
begin
	VAL_1_5[4] = 1'b0;
end 
// VAL_1_5[ 3 ]
initial
begin
	VAL_1_5[3] = 1'b0;
end 
// VAL_1_5[ 2 ]
initial
begin
	VAL_1_5[2] = 1'b0;
end 
// VAL_1_5[ 1 ]
initial
begin
	VAL_1_5[1] = 1'b0;
end 
// VAL_1_5[ 0 ]
initial
begin
	VAL_1_5[0] = 1'b0;
end 
// VAL_1_6[ 7 ]
initial
begin
	VAL_1_6[7] = 1'b0;
end 
// VAL_1_6[ 6 ]
initial
begin
	VAL_1_6[6] = 1'b0;
end 
// VAL_1_6[ 5 ]
initial
begin
	VAL_1_6[5] = 1'b0;
end 
// VAL_1_6[ 4 ]
initial
begin
	VAL_1_6[4] = 1'b0;
end 
// VAL_1_6[ 3 ]
initial
begin
	VAL_1_6[3] = 1'b0;
end 
// VAL_1_6[ 2 ]
initial
begin
	VAL_1_6[2] = 1'b0;
end 
// VAL_1_6[ 1 ]
initial
begin
	VAL_1_6[1] = 1'b0;
end 
// VAL_1_6[ 0 ]
initial
begin
	VAL_1_6[0] = 1'b0;
end 
// VAL_1_7[ 7 ]
initial
begin
	VAL_1_7[7] = 1'b0;
end 
// VAL_1_7[ 6 ]
initial
begin
	VAL_1_7[6] = 1'b0;
end 
// VAL_1_7[ 5 ]
initial
begin
	VAL_1_7[5] = 1'b0;
end 
// VAL_1_7[ 4 ]
initial
begin
	VAL_1_7[4] = 1'b0;
end 
// VAL_1_7[ 3 ]
initial
begin
	VAL_1_7[3] = 1'b0;
end 
// VAL_1_7[ 2 ]
initial
begin
	VAL_1_7[2] = 1'b0;
end 
// VAL_1_7[ 1 ]
initial
begin
	VAL_1_7[1] = 1'b0;
end 
// VAL_1_7[ 0 ]
initial
begin
	VAL_1_7[0] = 1'b0;
end 
// VAL_1_8[ 7 ]
initial
begin
	VAL_1_8[7] = 1'b0;
end 
// VAL_1_8[ 6 ]
initial
begin
	VAL_1_8[6] = 1'b0;
end 
// VAL_1_8[ 5 ]
initial
begin
	VAL_1_8[5] = 1'b0;
end 
// VAL_1_8[ 4 ]
initial
begin
	VAL_1_8[4] = 1'b0;
end 
// VAL_1_8[ 3 ]
initial
begin
	VAL_1_8[3] = 1'b0;
end 
// VAL_1_8[ 2 ]
initial
begin
	VAL_1_8[2] = 1'b0;
end 
// VAL_1_8[ 1 ]
initial
begin
	VAL_1_8[1] = 1'b0;
end 
// VAL_1_8[ 0 ]
initial
begin
	VAL_1_8[0] = 1'b0;
end 
// VAL_1_9[ 7 ]
initial
begin
	VAL_1_9[7] = 1'b0;
end 
// VAL_1_9[ 6 ]
initial
begin
	VAL_1_9[6] = 1'b0;
end 
// VAL_1_9[ 5 ]
initial
begin
	VAL_1_9[5] = 1'b0;
end 
// VAL_1_9[ 4 ]
initial
begin
	VAL_1_9[4] = 1'b0;
end 
// VAL_1_9[ 3 ]
initial
begin
	VAL_1_9[3] = 1'b0;
end 
// VAL_1_9[ 2 ]
initial
begin
	VAL_1_9[2] = 1'b0;
end 
// VAL_1_9[ 1 ]
initial
begin
	VAL_1_9[1] = 1'b0;
end 
// VAL_1_9[ 0 ]
initial
begin
	VAL_1_9[0] = 1'b0;
end 

// VAL_1_100
initial
begin
	VAL_1_100 = 1'b0;
end 

// VAL_1_101
initial
begin
	VAL_1_101 = 1'b0;
end 

// VAL_1_102
initial
begin
	VAL_1_102 = 1'b0;
end 

// VAL_1_103
initial
begin
	VAL_1_103 = 1'b0;
end 

// VAL_1_104
initial
begin
	VAL_1_104 = 1'b0;
end 

// VAL_1_105
initial
begin
	VAL_1_105 = 1'b0;
end 

// VAL_1_106
initial
begin
	VAL_1_106 = 1'b0;
end 

// VAL_1_107
initial
begin
	VAL_1_107 = 1'b0;
end 

// VAL_1_110
initial
begin
	VAL_1_110 = 1'b0;
end 

// VAL_1_111
initial
begin
	VAL_1_111 = 1'b0;
end 

// VAL_1_112
initial
begin
	VAL_1_112 = 1'b0;
end 

// VAL_1_113
initial
begin
	VAL_1_113 = 1'b0;
end 

// VAL_1_114
initial
begin
	VAL_1_114 = 1'b0;
end 

// VAL_1_115
initial
begin
	VAL_1_115 = 1'b0;
end 

// VAL_1_116
initial
begin
	VAL_1_116 = 1'b0;
end 

// VAL_1_117
initial
begin
	VAL_1_117 = 1'b0;
end 

// VAL_1_120
initial
begin
	VAL_1_120 = 1'b0;
end 

// VAL_1_121
initial
begin
	VAL_1_121 = 1'b0;
end 

// VAL_1_122
initial
begin
	VAL_1_122 = 1'b0;
end 

// VAL_1_123
initial
begin
	VAL_1_123 = 1'b0;
end 

// VAL_1_124
initial
begin
	VAL_1_124 = 1'b0;
end 

// VAL_1_125
initial
begin
	VAL_1_125 = 1'b0;
end 

// VAL_1_126
initial
begin
	VAL_1_126 = 1'b0;
end 

// VAL_1_127
initial
begin
	VAL_1_127 = 1'b0;
end 

// VAL_1_130
initial
begin
	VAL_1_130 = 1'b0;
end 

// VAL_1_131
initial
begin
	VAL_1_131 = 1'b0;
end 

// VAL_1_132
initial
begin
	VAL_1_132 = 1'b0;
end 

// VAL_1_133
initial
begin
	VAL_1_133 = 1'b0;
end 

// VAL_1_134
initial
begin
	VAL_1_134 = 1'b0;
end 

// VAL_1_135
initial
begin
	VAL_1_135 = 1'b0;
end 

// VAL_1_136
initial
begin
	VAL_1_136 = 1'b0;
end 

// VAL_1_137
initial
begin
	VAL_1_137 = 1'b0;
end 

// VAL_1_140
initial
begin
	VAL_1_140 = 1'b0;
end 

// VAL_1_141
initial
begin
	VAL_1_141 = 1'b0;
end 

// VAL_1_142
initial
begin
	VAL_1_142 = 1'b0;
end 

// VAL_1_143
initial
begin
	VAL_1_143 = 1'b0;
end 

// VAL_1_144
initial
begin
	VAL_1_144 = 1'b0;
end 

// VAL_1_145
initial
begin
	VAL_1_145 = 1'b0;
end 

// VAL_1_146
initial
begin
	VAL_1_146 = 1'b0;
end 

// VAL_1_147
initial
begin
	VAL_1_147 = 1'b0;
end 

// VAL_1_150
initial
begin
	VAL_1_150 = 1'b0;
end 

// VAL_1_151
initial
begin
	VAL_1_151 = 1'b0;
end 

// VAL_1_152
initial
begin
	VAL_1_152 = 1'b0;
end 

// VAL_1_153
initial
begin
	VAL_1_153 = 1'b0;
end 

// VAL_1_154
initial
begin
	VAL_1_154 = 1'b0;
end 

// VAL_1_155
initial
begin
	VAL_1_155 = 1'b0;
end 

// VAL_1_156
initial
begin
	VAL_1_156 = 1'b0;
end 

// VAL_1_157
initial
begin
	VAL_1_157 = 1'b0;
end 

// VAL_1_160
initial
begin
	VAL_1_160 = 1'b0;
end 

// VAL_1_161
initial
begin
	VAL_1_161 = 1'b0;
end 

// VAL_1_162
initial
begin
	VAL_1_162 = 1'b0;
end 

// VAL_1_163
initial
begin
	VAL_1_163 = 1'b0;
end 

// VAL_1_164
initial
begin
	VAL_1_164 = 1'b0;
end 

// VAL_1_165
initial
begin
	VAL_1_165 = 1'b0;
end 

// VAL_1_166
initial
begin
	VAL_1_166 = 1'b0;
end 

// VAL_1_167
initial
begin
	VAL_1_167 = 1'b0;
end 
endmodule

