// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2021 19:36:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_8bit_4x1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_8bit_4x1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] CE;
reg [7:0] S0;
reg [7:0] S1;
reg [7:0] S2;
reg [7:0] S3;
// wires                                               
wire [7:0] Out;

// assign statements (if any)                          
mux_8bit_4x1 i1 (
// port map - connection between master ports and signals/registers   
	.CE(CE),
	.Out(Out),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3)
);
initial 
begin 
#1000000 $finish;
end 
// CE[ 1 ]
initial
begin
	CE[1] = 1'b0;
end 
// CE[ 0 ]
initial
begin
	CE[0] = 1'b1;
end 
// S0[ 7 ]
initial
begin
	S0[7] = 1'b0;
	S0[7] = #120000 1'b1;
	S0[7] = #80000 1'b0;
end 
// S0[ 6 ]
initial
begin
	S0[6] = 1'b0;
	S0[6] = #120000 1'b1;
	S0[6] = #80000 1'b0;
end 
// S0[ 5 ]
initial
begin
	S0[5] = 1'b0;
end 
// S0[ 4 ]
initial
begin
	S0[4] = 1'b0;
end 
// S0[ 3 ]
initial
begin
	S0[3] = 1'b0;
end 
// S0[ 2 ]
initial
begin
	S0[2] = 1'b0;
end 
// S0[ 1 ]
initial
begin
	S0[1] = 1'b0;
end 
// S0[ 0 ]
initial
begin
	S0[0] = 1'b0;
end 
// S1[ 7 ]
initial
begin
	S1[7] = 1'b0;
	S1[7] = #360000 1'b1;
	S1[7] = #80000 1'b0;
end 
// S1[ 6 ]
initial
begin
	S1[6] = 1'b0;
	S1[6] = #360000 1'b1;
	S1[6] = #80000 1'b0;
end 
// S1[ 5 ]
initial
begin
	S1[5] = 1'b0;
end 
// S1[ 4 ]
initial
begin
	S1[4] = 1'b0;
end 
// S1[ 3 ]
initial
begin
	S1[3] = 1'b0;
end 
// S1[ 2 ]
initial
begin
	S1[2] = 1'b0;
end 
// S1[ 1 ]
initial
begin
	S1[1] = 1'b0;
end 
// S1[ 0 ]
initial
begin
	S1[0] = 1'b0;
end 
// S2[ 7 ]
initial
begin
	S2[7] = 1'b0;
end 
// S2[ 6 ]
initial
begin
	S2[6] = 1'b0;
	S2[6] = #260000 1'b1;
	S2[6] = #60000 1'b0;
end 
// S2[ 5 ]
initial
begin
	S2[5] = 1'b0;
	S2[5] = #260000 1'b1;
	S2[5] = #60000 1'b0;
end 
// S2[ 4 ]
initial
begin
	S2[4] = 1'b0;
	S2[4] = #260000 1'b1;
	S2[4] = #60000 1'b0;
end 
// S2[ 3 ]
initial
begin
	S2[3] = 1'b0;
end 
// S2[ 2 ]
initial
begin
	S2[2] = 1'b0;
end 
// S2[ 1 ]
initial
begin
	S2[1] = 1'b0;
end 
// S2[ 0 ]
initial
begin
	S2[0] = 1'b0;
end 
// S3[ 7 ]
initial
begin
	S3[7] = 1'b0;
end 
// S3[ 6 ]
initial
begin
	S3[6] = 1'b0;
end 
// S3[ 5 ]
initial
begin
	S3[5] = 1'b0;
end 
// S3[ 4 ]
initial
begin
	S3[4] = 1'b0;
end 
// S3[ 3 ]
initial
begin
	S3[3] = 1'b0;
end 
// S3[ 2 ]
initial
begin
	S3[2] = 1'b0;
end 
// S3[ 1 ]
initial
begin
	S3[1] = 1'b0;
end 
// S3[ 0 ]
initial
begin
	S3[0] = 1'b0;
end 
endmodule

