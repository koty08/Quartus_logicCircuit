// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 11:20:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU_MEMORY
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_MEMORY_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] RAM2;
reg [7:0] RAM4;
reg [7:0] RAM5;
reg rst;
reg sharp;
reg star;
// wires                                               
wire a;
wire b;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire [7:0] inp;
wire outp0;
wire outp1;
wire outp2;
wire outp3;
wire outp4;
wire outp5;
wire outp6;
wire outp7;
wire outp20;
wire outp21;
wire outp22;
wire outp23;
wire outp24;
wire outp25;
wire outp26;
wire outp27;
wire [7:0] pin_name1;
wire [7:0] pin_name2;
wire [7:0] pin_name3;

// assign statements (if any)                          
CPU_MEMORY i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.inp(inp),
	.outp0(outp0),
	.outp1(outp1),
	.outp2(outp2),
	.outp3(outp3),
	.outp4(outp4),
	.outp5(outp5),
	.outp6(outp6),
	.outp7(outp7),
	.outp20(outp20),
	.outp21(outp21),
	.outp22(outp22),
	.outp23(outp23),
	.outp24(outp24),
	.outp25(outp25),
	.outp26(outp26),
	.outp27(outp27),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.RAM2(RAM2),
	.RAM4(RAM4),
	.RAM5(RAM5),
	.rst(rst),
	.sharp(sharp),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 
// RAM2[ 7 ]
initial
begin
	RAM2[7] = 1'b0;
end 
// RAM2[ 6 ]
initial
begin
	RAM2[6] = 1'b1;
	RAM2[6] = #230000 1'b0;
	RAM2[6] = #140000 1'b1;
end 
// RAM2[ 5 ]
initial
begin
	RAM2[5] = 1'b0;
end 
// RAM2[ 4 ]
initial
begin
	RAM2[4] = 1'b0;
end 
// RAM2[ 3 ]
initial
begin
	RAM2[3] = 1'b0;
end 
// RAM2[ 2 ]
initial
begin
	RAM2[2] = 1'b1;
	RAM2[2] = #230000 1'b0;
	RAM2[2] = #140000 1'b1;
end 
// RAM2[ 1 ]
initial
begin
	RAM2[1] = 1'b0;
end 
// RAM2[ 0 ]
initial
begin
	RAM2[0] = 1'b0;
end 
// RAM4[ 7 ]
initial
begin
	RAM4[7] = 1'b0;
end 
// RAM4[ 6 ]
initial
begin
	RAM4[6] = 1'b0;
end 
// RAM4[ 5 ]
initial
begin
	RAM4[5] = 1'b0;
end 
// RAM4[ 4 ]
initial
begin
	RAM4[4] = 1'b0;
end 
// RAM4[ 3 ]
initial
begin
	RAM4[3] = 1'b0;
end 
// RAM4[ 2 ]
initial
begin
	RAM4[2] = 1'b1;
	RAM4[2] = #230000 1'b0;
	RAM4[2] = #140000 1'b1;
end 
// RAM4[ 1 ]
initial
begin
	RAM4[1] = 1'b1;
	RAM4[1] = #230000 1'b0;
	RAM4[1] = #140000 1'b1;
end 
// RAM4[ 0 ]
initial
begin
	RAM4[0] = 1'b1;
	RAM4[0] = #230000 1'b0;
	RAM4[0] = #140000 1'b1;
end 
// RAM5[ 7 ]
initial
begin
	RAM5[7] = 1'b0;
end 
// RAM5[ 6 ]
initial
begin
	RAM5[6] = 1'b1;
	RAM5[6] = #240000 1'b0;
	RAM5[6] = #130000 1'b1;
end 
// RAM5[ 5 ]
initial
begin
	RAM5[5] = 1'b0;
end 
// RAM5[ 4 ]
initial
begin
	RAM5[4] = 1'b0;
end 
// RAM5[ 3 ]
initial
begin
	RAM5[3] = 1'b0;
end 
// RAM5[ 2 ]
initial
begin
	RAM5[2] = 1'b0;
end 
// RAM5[ 1 ]
initial
begin
	RAM5[1] = 1'b0;
end 
// RAM5[ 0 ]
initial
begin
	RAM5[0] = 1'b1;
	RAM5[0] = #240000 1'b0;
	RAM5[0] = #130000 1'b1;
end 

// star
initial
begin
	star = 1'b0;
	star = #60000 1'b1;
	star = #160000 1'b0;
	star = #160000 1'b1;
	star = #160000 1'b0;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #260000 1'b1;
	sharp = #90000 1'b0;
	sharp = #490000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

