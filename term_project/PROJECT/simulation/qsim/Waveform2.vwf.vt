// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 17:35:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sram_8bitx8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sram_8bitx8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] CE_in;
reg CE_out0;
reg CE_out1;
reg CE_out2;
reg CE_out20;
reg CE_out21;
reg CE_out22;
reg clk;
reg [7:0] din;
reg reg_ce;
reg rst_n;
// wires                                               
wire Out0;
wire Out1;
wire Out2;
wire Out3;
wire Out4;
wire Out5;
wire Out6;
wire Out7;
wire Out20;
wire Out21;
wire Out22;
wire Out23;
wire Out24;
wire Out25;
wire Out26;
wire Out27;

// assign statements (if any)                          
sram_8bitx8 i1 (
// port map - connection between master ports and signals/registers   
	.CE_in(CE_in),
	.CE_out0(CE_out0),
	.CE_out1(CE_out1),
	.CE_out2(CE_out2),
	.CE_out20(CE_out20),
	.CE_out21(CE_out21),
	.CE_out22(CE_out22),
	.clk(clk),
	.din(din),
	.Out0(Out0),
	.Out1(Out1),
	.Out2(Out2),
	.Out3(Out3),
	.Out4(Out4),
	.Out5(Out5),
	.Out6(Out6),
	.Out7(Out7),
	.Out20(Out20),
	.Out21(Out21),
	.Out22(Out22),
	.Out23(Out23),
	.Out24(Out24),
	.Out25(Out25),
	.Out26(Out26),
	.Out27(Out27),
	.reg_ce(reg_ce),
	.rst_n(rst_n)
);
initial 
begin 
#1000000 $finish;
end 
// CE_in[ 2 ]
initial
begin
	CE_in[2] = 1'b0;
	CE_in[2] = #20000 1'b1;
	CE_in[2] = #80000 1'b0;
	CE_in[2] = #230000 1'b1;
	CE_in[2] = #110000 1'b0;
end 
// CE_in[ 1 ]
initial
begin
	CE_in[1] = 1'b0;
	CE_in[1] = #20000 1'b1;
	CE_in[1] = #80000 1'b0;
	CE_in[1] = #110000 1'b1;
	CE_in[1] = #60000 1'b0;
	CE_in[1] = #60000 1'b1;
	CE_in[1] = #110000 1'b0;
end 
// CE_in[ 0 ]
initial
begin
	CE_in[0] = 1'b0;
	CE_in[0] = #210000 1'b1;
	CE_in[0] = #60000 1'b0;
	CE_in[0] = #60000 1'b1;
	CE_in[0] = #110000 1'b0;
end 

// CE_out0
initial
begin
	CE_out0 = 1'b0;
	CE_out0 = #760000 1'b1;
	CE_out0 = #40000 1'b0;
	CE_out0 = #60000 1'b1;
	CE_out0 = #90000 1'b0;
end 

// CE_out1
initial
begin
	CE_out1 = 1'b0;
	CE_out1 = #620000 1'b1;
	CE_out1 = #60000 1'b0;
	CE_out1 = #80000 1'b1;
	CE_out1 = #40000 1'b0;
	CE_out1 = #60000 1'b1;
	CE_out1 = #90000 1'b0;
end 

// CE_out2
initial
begin
	CE_out2 = 1'b0;
	CE_out2 = #620000 1'b1;
	CE_out2 = #60000 1'b0;
	CE_out2 = #180000 1'b1;
	CE_out2 = #90000 1'b0;
end 

// CE_out20
initial
begin
	CE_out20 = 1'b0;
	CE_out20 = #680000 1'b1;
	CE_out20 = #70000 1'b0;
	CE_out20 = #110000 1'b1;
	CE_out20 = #90000 1'b0;
end 

// CE_out21
initial
begin
	CE_out21 = 1'b0;
	CE_out21 = #680000 1'b1;
	CE_out21 = #70000 1'b0;
	CE_out21 = #110000 1'b1;
	CE_out21 = #90000 1'b0;
end 

// CE_out22
initial
begin
	CE_out22 = 1'b0;
	CE_out22 = #680000 1'b1;
	CE_out22 = #70000 1'b0;
	CE_out22 = #110000 1'b1;
	CE_out22 = #90000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// din[ 7 ]
initial
begin
	din[7] = 1'b1;
	din[7] = #120000 1'b0;
	din[7] = #200000 1'b1;
	din[7] = #120000 1'b0;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b1;
	din[6] = #120000 1'b0;
	din[6] = #200000 1'b1;
	din[6] = #120000 1'b0;
end 
// din[ 5 ]
initial
begin
	din[5] = 1'b1;
	din[5] = #120000 1'b0;
	din[5] = #70000 1'b1;
	din[5] = #90000 1'b0;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b1;
	din[4] = #120000 1'b0;
	din[4] = #70000 1'b1;
	din[4] = #90000 1'b0;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b0;
	din[3] = #190000 1'b1;
	din[3] = #90000 1'b0;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b0;
	din[2] = #190000 1'b1;
	din[2] = #90000 1'b0;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
	din[1] = #190000 1'b1;
	din[1] = #90000 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
	din[0] = #190000 1'b1;
	din[0] = #90000 1'b0;
end 

// reg_ce
initial
begin
	reg_ce = 1'b1;
	reg_ce = #510000 1'b0;
	reg_ce = #470000 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
endmodule

