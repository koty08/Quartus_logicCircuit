// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 15:23:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU_MEMORY
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_MEMORY_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] RAM2;
reg [7:0] RAM4;
reg [7:0] RAM5;
reg rst;
reg sharp;
reg star;
// wires                                               
wire a;
wire [7:0] after_reg;
wire b;
wire [7:0] before_reg;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire [7:0] SHW_Din;
wire [7:0] sram_out;

// assign statements (if any)                          
CPU_MEMORY i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.after_reg(after_reg),
	.b(b),
	.before_reg(before_reg),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.RAM2(RAM2),
	.RAM4(RAM4),
	.RAM5(RAM5),
	.rst(rst),
	.sharp(sharp),
	.SHW_Din(SHW_Din),
	.sram_out(sram_out),
	.star(star)
);
initial 
begin 
#2000000 $finish;
end 
// RAM2[ 7 ]
initial
begin
	RAM2[7] = 1'b0;
end 
// RAM2[ 6 ]
initial
begin
	RAM2[6] = 1'b1;
	RAM2[6] = #800000 1'b0;
	RAM2[6] = #200000 1'b1;
	RAM2[6] = #640000 1'b0;
end 
// RAM2[ 5 ]
initial
begin
	RAM2[5] = 1'b0;
end 
// RAM2[ 4 ]
initial
begin
	RAM2[4] = 1'b0;
end 
// RAM2[ 3 ]
initial
begin
	RAM2[3] = 1'b0;
end 
// RAM2[ 2 ]
initial
begin
	RAM2[2] = 1'b1;
	RAM2[2] = #800000 1'b0;
	RAM2[2] = #200000 1'b1;
	RAM2[2] = #640000 1'b0;
end 
// RAM2[ 1 ]
initial
begin
	RAM2[1] = 1'b0;
end 
// RAM2[ 0 ]
initial
begin
	RAM2[0] = 1'b0;
end 
// RAM4[ 7 ]
initial
begin
	RAM4[7] = 1'b0;
end 
// RAM4[ 6 ]
initial
begin
	RAM4[6] = 1'b0;
end 
// RAM4[ 5 ]
initial
begin
	RAM4[5] = 1'b0;
end 
// RAM4[ 4 ]
initial
begin
	RAM4[4] = 1'b0;
end 
// RAM4[ 3 ]
initial
begin
	RAM4[3] = 1'b0;
end 
// RAM4[ 2 ]
initial
begin
	RAM4[2] = 1'b1;
	RAM4[2] = #800000 1'b0;
	RAM4[2] = #200000 1'b1;
	RAM4[2] = #640000 1'b0;
end 
// RAM4[ 1 ]
initial
begin
	RAM4[1] = 1'b0;
end 
// RAM4[ 0 ]
initial
begin
	RAM4[0] = 1'b0;
	RAM4[0] = #1000000 1'b1;
	RAM4[0] = #640000 1'b0;
end 
// RAM5[ 7 ]
initial
begin
	RAM5[7] = 1'b0;
end 
// RAM5[ 6 ]
initial
begin
	RAM5[6] = 1'b1;
	RAM5[6] = #800000 1'b0;
	RAM5[6] = #200000 1'b1;
	RAM5[6] = #640000 1'b0;
end 
// RAM5[ 5 ]
initial
begin
	RAM5[5] = 1'b0;
end 
// RAM5[ 4 ]
initial
begin
	RAM5[4] = 1'b0;
end 
// RAM5[ 3 ]
initial
begin
	RAM5[3] = 1'b0;
end 
// RAM5[ 2 ]
initial
begin
	RAM5[2] = 1'b0;
end 
// RAM5[ 1 ]
initial
begin
	RAM5[1] = 1'b0;
end 
// RAM5[ 0 ]
initial
begin
	RAM5[0] = 1'b1;
	RAM5[0] = #800000 1'b0;
	RAM5[0] = #200000 1'b1;
	RAM5[0] = #640000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #800000 1'b1;
	sharp = #200000 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #250000 1'b1;
	star = #470000 1'b0;
	star = #440000 1'b1;
	star = #480000 1'b0;
end 
endmodule

