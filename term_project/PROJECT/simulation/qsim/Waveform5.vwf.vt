// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 11:42:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PROJECT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PROJECT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg dip_switch;
reg eight;
reg five;
reg four;
reg nine;
reg one;
reg rst;
reg seven;
reg sharp;
reg six;
reg star;
reg three;
reg two;
reg zero;
// wires                                               
wire a;
wire [2:0] ADD;
wire b;
wire c;
wire [7:0] ccc;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire [7:0] inin;
wire [7:0] LCD_DATA;
wire LCD_E;
wire LCD_RS;
wire LCD_RW;
wire [7:0] oo1;
wire [7:0] oo2;
wire [7:0] RAM1;
wire [7:0] ram2;
wire [7:0] ram4;
wire [7:0] ram5;
wire REGCE;

// assign statements (if any)                          
PROJECT i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.ADD(ADD),
	.b(b),
	.c(c),
	.ccc(ccc),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.dip_switch(dip_switch),
	.e(e),
	.eight(eight),
	.f(f),
	.five(five),
	.four(four),
	.g(g),
	.inin(inin),
	.LCD_DATA(LCD_DATA),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.nine(nine),
	.one(one),
	.oo1(oo1),
	.oo2(oo2),
	.RAM1(RAM1),
	.ram2(ram2),
	.ram4(ram4),
	.ram5(ram5),
	.REGCE(REGCE),
	.rst(rst),
	.seven(seven),
	.sharp(sharp),
	.six(six),
	.star(star),
	.three(three),
	.two(two),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// sharp
initial
begin
	sharp = 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #730000 1'b1;
	star = #250000 1'b0;
end 

// nine
initial
begin
	nine = 1'b0;
end 

// eight
initial
begin
	eight = 1'b0;
end 

// seven
initial
begin
	seven = 1'b0;
end 

// six
initial
begin
	six = 1'b0;
	six = #480000 1'b1;
	six = #20000 1'b0;
end 

// five
initial
begin
	five = 1'b0;
end 

// four
initial
begin
	four = 1'b0;
end 

// three
initial
begin
	three = 1'b0;
end 

// two
initial
begin
	two = 1'b0;
end 

// one
initial
begin
	one = 1'b0;
	one = #10000 1'b1;
	one = #40000 1'b0;
	one = #80000 1'b1;
	one = #30000 1'b0;
	one = #30000 1'b1;
	one = #40000 1'b0;
	one = #20000 1'b1;
	one = #40000 1'b0;
	one = #20000 1'b1;
	one = #40000 1'b0;
	one = #40000 1'b1;
	one = #40000 1'b0;
	one = #160000 1'b1;
	one = #30000 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #60000 1'b1;
	zero = #60000 1'b0;
	zero = #240000 1'b1;
	zero = #20000 1'b0;
	zero = #60000 1'b1;
	zero = #30000 1'b0;
	zero = #50000 1'b1;
	zero = #40000 1'b0;
	zero = #80000 1'b1;
	zero = #30000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// dip_switch
initial
begin
	dip_switch = 1'b0;
	dip_switch = #470000 1'b1;
	dip_switch = #110000 1'b0;
	dip_switch = #100000 1'b1;
	dip_switch = #70000 1'b0;
end 
endmodule

