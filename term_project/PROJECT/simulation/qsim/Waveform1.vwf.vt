// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 17:09:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sub_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sub_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Dst;
reg is_ADD;
reg rst;
reg [7:0] Src;
// wires                                               
wire [7:0] Dout;

// assign statements (if any)                          
sub_module i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Dout(Dout),
	.Dst(Dst),
	.is_ADD(is_ADD),
	.rst(rst),
	.Src(Src)
);
initial 
begin 
#1000000 $finish;
end 
// Dst[ 7 ]
initial
begin
	Dst[7] = 1'b0;
end 
// Dst[ 6 ]
initial
begin
	Dst[6] = 1'b0;
	Dst[6] = #30000 1'b1;
	Dst[6] = #70000 1'b0;
end 
// Dst[ 5 ]
initial
begin
	Dst[5] = 1'b0;
	Dst[5] = #30000 1'b1;
	Dst[5] = #70000 1'b0;
	Dst[5] = #420000 1'b1;
	Dst[5] = #90000 1'b0;
end 
// Dst[ 4 ]
initial
begin
	Dst[4] = 1'b0;
	Dst[4] = #30000 1'b1;
	Dst[4] = #70000 1'b0;
	Dst[4] = #40000 1'b1;
	Dst[4] = #70000 1'b0;
	Dst[4] = #310000 1'b1;
	Dst[4] = #90000 1'b0;
end 
// Dst[ 3 ]
initial
begin
	Dst[3] = 1'b0;
	Dst[3] = #30000 1'b1;
	Dst[3] = #70000 1'b0;
	Dst[3] = #40000 1'b1;
	Dst[3] = #70000 1'b0;
	Dst[3] = #150000 1'b1;
	Dst[3] = #120000 1'b0;
	Dst[3] = #40000 1'b1;
	Dst[3] = #90000 1'b0;
end 
// Dst[ 2 ]
initial
begin
	Dst[2] = 1'b0;
	Dst[2] = #140000 1'b1;
	Dst[2] = #70000 1'b0;
	Dst[2] = #150000 1'b1;
	Dst[2] = #120000 1'b0;
	Dst[2] = #40000 1'b1;
	Dst[2] = #90000 1'b0;
end 
// Dst[ 1 ]
initial
begin
	Dst[1] = 1'b0;
	Dst[1] = #140000 1'b1;
	Dst[1] = #70000 1'b0;
	Dst[1] = #150000 1'b1;
	Dst[1] = #120000 1'b0;
	Dst[1] = #40000 1'b1;
	Dst[1] = #90000 1'b0;
end 
// Dst[ 0 ]
initial
begin
	Dst[0] = 1'b0;
end 
// Src[ 7 ]
initial
begin
	Src[7] = 1'b0;
end 
// Src[ 6 ]
initial
begin
	Src[6] = 1'b0;
	Src[6] = #50000 1'b1;
	Src[6] = #90000 1'b0;
	Src[6] = #200000 1'b1;
	Src[6] = #110000 1'b0;
end 
// Src[ 5 ]
initial
begin
	Src[5] = 1'b0;
	Src[5] = #50000 1'b1;
	Src[5] = #90000 1'b0;
	Src[5] = #200000 1'b1;
	Src[5] = #110000 1'b0;
	Src[5] = #50000 1'b1;
	Src[5] = #150000 1'b0;
end 
// Src[ 4 ]
initial
begin
	Src[4] = 1'b0;
	Src[4] = #50000 1'b1;
	Src[4] = #90000 1'b0;
	Src[4] = #50000 1'b1;
	Src[4] = #100000 1'b0;
	Src[4] = #50000 1'b1;
	Src[4] = #110000 1'b0;
	Src[4] = #50000 1'b1;
	Src[4] = #150000 1'b0;
end 
// Src[ 3 ]
initial
begin
	Src[3] = 1'b0;
	Src[3] = #50000 1'b1;
	Src[3] = #90000 1'b0;
	Src[3] = #50000 1'b1;
	Src[3] = #100000 1'b0;
	Src[3] = #50000 1'b1;
	Src[3] = #110000 1'b0;
	Src[3] = #50000 1'b1;
	Src[3] = #150000 1'b0;
end 
// Src[ 2 ]
initial
begin
	Src[2] = 1'b0;
	Src[2] = #50000 1'b1;
	Src[2] = #90000 1'b0;
	Src[2] = #50000 1'b1;
	Src[2] = #100000 1'b0;
	Src[2] = #210000 1'b1;
	Src[2] = #150000 1'b0;
end 
// Src[ 1 ]
initial
begin
	Src[1] = 1'b0;
	Src[1] = #190000 1'b1;
	Src[1] = #100000 1'b0;
	Src[1] = #210000 1'b1;
	Src[1] = #150000 1'b0;
end 
// Src[ 0 ]
initial
begin
	Src[0] = 1'b0;
end 

// is_ADD
initial
begin
	is_ADD = 1'b0;
	is_ADD = #120000 1'b1;
	is_ADD = #470000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

