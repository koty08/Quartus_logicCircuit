// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/19/2021 22:50:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shw_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shw_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Din;
reg is_SHW;
reg rst;
// wires                                               
wire a;
wire b;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
shw_module i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.Din(Din),
	.e(e),
	.f(f),
	.g(g),
	.is_SHW(is_SHW),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// Din[ 7 ]
initial
begin
	Din[7] = 1'b0;
	Din[7] = #220000 1'b1;
	Din[7] = #340000 1'b0;
end 
// Din[ 6 ]
initial
begin
	Din[6] = 1'b0;
	Din[6] = #220000 1'b1;
	Din[6] = #340000 1'b0;
end 
// Din[ 5 ]
initial
begin
	Din[5] = 1'b0;
	Din[5] = #220000 1'b1;
	Din[5] = #340000 1'b0;
end 
// Din[ 4 ]
initial
begin
	Din[4] = 1'b0;
	Din[4] = #30000 1'b1;
	Din[4] = #170000 1'b0;
	Din[4] = #20000 1'b1;
	Din[4] = #340000 1'b0;
	Din[4] = #90000 1'b1;
	Din[4] = #190000 1'b0;
end 
// Din[ 3 ]
initial
begin
	Din[3] = 1'b0;
	Din[3] = #30000 1'b1;
	Din[3] = #170000 1'b0;
	Din[3] = #20000 1'b1;
	Din[3] = #340000 1'b0;
	Din[3] = #90000 1'b1;
	Din[3] = #190000 1'b0;
end 
// Din[ 2 ]
initial
begin
	Din[2] = 1'b0;
	Din[2] = #30000 1'b1;
	Din[2] = #170000 1'b0;
	Din[2] = #450000 1'b1;
	Din[2] = #190000 1'b0;
end 
// Din[ 1 ]
initial
begin
	Din[1] = 1'b0;
	Din[1] = #30000 1'b1;
	Din[1] = #170000 1'b0;
	Din[1] = #450000 1'b1;
	Din[1] = #190000 1'b0;
end 
// Din[ 0 ]
initial
begin
	Din[0] = 1'b0;
	Din[0] = #30000 1'b1;
	Din[0] = #170000 1'b0;
	Din[0] = #450000 1'b1;
	Din[0] = #190000 1'b0;
end 

// is_SHW
initial
begin
	is_SHW = 1'b0;
	is_SHW = #220000 1'b1;
	is_SHW = #350000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

