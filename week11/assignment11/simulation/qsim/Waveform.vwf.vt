// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2021 19:32:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ten_week_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ten_week_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Din0;
reg Din1;
reg Din2;
reg Din3;
reg Din4;
reg Din5;
reg Din6;
reg Din7;
reg Din8;
reg Din9;
reg rst;
// wires                                               
wire a;
wire b;
wire B0;
wire B1;
wire B2;
wire B3;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire G0;
wire G1;
wire G2;
wire G3;
wire piezo;
wire [3:0] R;
wire stepMoterA;
wire stepMoterAAA;
wire stepMoterB;
wire stepMoterBBB;

// assign statements (if any)                          
ten_week_2 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.Din0(Din0),
	.Din1(Din1),
	.Din2(Din2),
	.Din3(Din3),
	.Din4(Din4),
	.Din5(Din5),
	.Din6(Din6),
	.Din7(Din7),
	.Din8(Din8),
	.Din9(Din9),
	.e(e),
	.f(f),
	.g(g),
	.G0(G0),
	.G1(G1),
	.G2(G2),
	.G3(G3),
	.piezo(piezo),
	.R(R),
	.rst(rst),
	.stepMoterA(stepMoterA),
	.stepMoterAAA(stepMoterAAA),
	.stepMoterB(stepMoterB),
	.stepMoterBBB(stepMoterBBB)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// Din0
initial
begin
	Din0 = 1'b0;
end 

// Din1
initial
begin
	Din1 = 1'b0;
end 

// Din2
initial
begin
	Din2 = 1'b0;
end 

// Din3
initial
begin
	Din3 = 1'b0;
end 

// Din4
initial
begin
	Din4 = 1'b0;
	Din4 = #20000 1'b1;
	Din4 = #80000 1'b0;
end 

// Din5
initial
begin
	Din5 = 1'b0;
	Din5 = #140000 1'b1;
	Din5 = #80000 1'b0;
end 

// Din6
initial
begin
	Din6 = 1'b0;
end 

// Din7
initial
begin
	Din7 = 1'b0;
	Din7 = #300000 1'b1;
	Din7 = #80000 1'b0;
end 

// Din8
initial
begin
	Din8 = 1'b0;
end 

// Din9
initial
begin
	Din9 = 1'b0;
	Din9 = #580000 1'b1;
	Din9 = #80000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

